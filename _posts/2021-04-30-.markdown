---
layout: post
title: '누구나 파이썬 통계학'
subtitle: '통계기초 with Python'
categories: book
tags : study
comments: False
---

> 파이썬으로 통계기초 배우기

# 1. 데이터

## 1.1 데이터의 크기
	=> .shape : 행, 열 개수
## 1.2 변수의 종류
	1.2.1 질적 변수와 양적변수
		- 질적변수 : 설문조사 등 종류를 구별하기 위한 변수
		- 양적변수 : 시험 점수나 신장과 같이 양을 표현하는 변수
	1.2.2 척도 수준
		- 명의 척도 : 구별하는 것
		- 순서 척도 : 순서관계, 대소관계, 차이 x
		- 간격 척도 : 대소관계, 차이 O, 비 X
		- 비례 척도 : 대소관계, 차이 O , 비 O, 절대 0이 존재함
	1.2.3 이산형 변수와 연속형 변수
		- 이산형 변수 : 하나하나의 값을 취하는 변수, 인접한 숫자 사이에 값이 존재하지 않음
		- 연속형 변수 : 연속적인 값을 취할 수 있는 변수

# 2. 1차원 데이터 정리
## 2.1 데이터 중심의 지표(기술통계)
	2.1.1 평균값
		- 전체합 / 관측 수
		- 이상치에 민감함
		- np.mean(), df.mean()
	2.1.2 중앙값
		- 데이터를 크기 순서대로 나열할때 정확하게 중앙에 위치한 값
		- 홀수 : n+1 / 2
		- 짝수 : n + 2 / 2
		- 이상치에 덜 민감함
		- np.median(), df.median()
	2.1.3 최빈값
		- 데이터에서 가장 많이 나타나는 값
		- pd.Series().mode()
		- from collections import Counter /  Counter()

## 2.2 데이터의 산포도 지표
	2.2.1 분산과 표준편차
		- 편차 : 각 데이터가 평균으로부터 어느 정도 떨어져 있는가를 나타내는 지표
		- 분산 : 편차 제곱 평균, 편차의 합은 0이기 때문에 제곱하고 평균을 해줌
		- 분산 => np.var(ddof = 1 or 0)
		- 표준편차 : 데이터와 동일한 단위를 쓰는 산포도의 지표
		- 표준편차 => np.std(ddof = 1 or 0)
	2.2.2 범위와 사분위 범위
		- 범위 : 최댓값과 최솟값만으로 산포도를 봄
		- 범위 => np.max() - np.min()
		- 사분위 범위 : 25% 50% 75%에 위치하는 값에 주목
		- IQR = Q3 - Q1
		- 사분위 => np.percentile(data, 사분위), .describe()

## 2.3 데이터의 정규화
	*다른 지표에 의존하지 않고 데이터의 상대적인 위치 관계를 알 수 있는 지표*
	데이터를 통일된 지표로 변환하는 것
	
	2.3.1 표준화
		- 데이터에서 평균을 빼고 표준편차로 나누는 작업, = Z점수, = 표준화 변량
		- xi - xbar / S
	2.3.2 편찻값
		- 50 + 10 * xi - xbar / S

## 2.4 1차원 데이터의 시각화
	2.4.1 도수분포표
		- *데이터의 분포 상태를 세부적으로 보고 싶을 때 사용*
		- 계급 : 구간
		- 도수 : 구간별 관측개수
		- 계급폭 : 각 구간의 폭
		- 계급수 : 계급의 수
		- 계급값 : 계급의 중앙값
		- 상대도수 : 해당 도수 / 전체도수합
		- 누적 상대도수 => np.cumsum()
	2.4.2 히스토그램
		- 도수분포표를 막대그래프로 나타낸 것
		- => .hist(data, bins=, range=)
	2.4.3 상자그림
		- => .barplot(data, labels=[])

# 3. 2차원 데이터 정리
## 3.1 두 데이터 사이의 관계를 나타내는 지표
	3.1.1 공분산
		- *데이터의 관계성을 수치화*
		- 부호를 붙인 면적의 평균은 상관의 지표가 됨
		- => np.cov(data1, data2, ddof= 1 or 2)
	3.1.2 상관계수
		- 단위에 의존하지 않는 상관을 나타내는 지표
		- -1 ~ 1사이에 값을 가짐
		=> np.corrcoef(data1, data2), df.corr()

## 3.2 2차원 데이터의 시각화
	3.2.1 산점도 
		=> .scatter(data1, data2)
	3.2.2 회귀직선
		=> .np.polyfit(data1, data2, 1) ->  .np.poly1d(polyfit) -> x좌표 구하기(np.linspace(최대, 최소)) -> y좌표 구하기(poly_1d(x좌표))  

	
