---
layout: post
title: '파이썬 객체지향 프로그래밍'
subtitle: '(CS)구조화된 코드는 어떤 거인가'
categories: Computer_Science
tags : software
comments: False
---

> 파이썬 객체지향 프로그래밍
> 해당내용은 인프런 파이썬 객체프로그래밍 출처입니다

[git code](https://github.com/koreahong/study_Python_OOP)

# 목적
- 해당 블로그는 파이썬 코딩을 좀 더 효율적이고 생산적으로 작성하기 위함임
- 코드는 깃헙에 있고 깃헙에 있지 않는 내용 위주로 작성

# 내용
- [데코레이터 패턴](#데코레이터-패턴)
- [객체지향](#객체지향)
  - OOP 원칙


# 데코레이터 패턴
- 테코레이터 패턴은 함수의 객체와 함수를 변경하는 다른 객체를 Wrapping 해줌
  - 예를들어 기존함수에 첨가를 해서 새로운 함수를 재정의 할때 모든 함수를 수정하기 보다는 Wrapping하여 모든 함수에 적용시킴
    즉, 기존의 함수를 꾸며주는 역할을 함  
    ```python 
    def copyright(func):
        def new_func():
            print("저작권내용")
            func()
        return new_func
    #골뱅이를 사용해서 함수를 재정의함
    @copyright
    def smlie():
        print("smile")
    
    @copyright
    def angry():
        print("angry")
    ```

# 객체지향
- OOP : 프로그램을 실제와 가깝게 모델링하는 것, 데이터를 추상화시켜 속성과 행위를 가진 객체로 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법
- class : 설계도, 특별한 데이터와 메서드의 집합
  - 절차지향생각 -> 반복적인 부분 발견 -> 집단에서 행위를 나눔 -> 속성을 나눔 -> 클래스 생성

- instance(object) 
  - 설계도로 실제 세상에 나온 무언가
  - class에 선언된 모양 그대로 생성된 실체
  - instance들은 각각 독립적이다 => 한 instance가 수정 및 변형되어도 다른 instance들은 아무런 영향을 받지 않는다.

## OOP 원칙
- 캡슐화, 추상화, 상속, 다형성

=> 4가지 원칙들을 지켜 변수와 메서드를 정의한 것이 class
=> 이러한 class들로 프로그래밍 한것이 OOP
=> 이런 OOP를 지원하는 것이 Python

### 추상화
- 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써
- 공통의 속성 값이나 행위를 하나로 묶어 이름을 붙이는 것    
```python 
class Robot:
    #클래스변수 - 인스턴스들이 공유하는 변수
    popluation = 0
    #인스턴스 생성
    def __init__(self, name, code)
        self.name = name
        self.code = code
        Robot.population += 1
    #행위 정의(인스턴스 메서드)
    def say_hi(self):
        #이외 코드
        print(f"Greetings, my masters call me {self.name}.")
    
    def cal_add(self, a, b):
        return a + b
    
    def die(self):
        print(f"{self.name} is being destroyed!")

    #cls는 클래스를 받음
    @classmethod
    def how_many(cls):
        print(f"We have {cls.population} Robot")
   
siri = Robot("siri", 12341251235)
jarvis = Robot("jarvis", 1233141312)
bixby = Robot("bixby", 12351123412)
```
=> 클래스를 사용할때 die의 결과가 어떻게 나오는지만 알면되지 구동방식이나 안에 복잡한 code는 몰라도 됨
=> die나 say_hi와 같이 인스턴스

+추상화 잘하는 법
    - 이름 잘 짓기 : 이름만 보아도 직관적으로 어디에 쓰이는지 유추할 수 있어야함
    - 문서화하기 - docstring : 클래스, 메소드, 변수 등에 설명 부여하기
        - 사용법  
        ```python   
         def fetch_words(url):
            """
            url주소에서 파일을 가져와 단어 리스트를 반환합니다.
            :param url: 불러올 url
            :return:
            """ 
        #docstring 호출
        fetch_words.__doc__ 
        ```

### 상속
1. What?
   - 부모 클래스가 갖는 모든 메서드와 속성이 자식 클래스에 그대로 상속됨
   - 자식 클래스에서 별도의 메서드나 속성을 추가
   - 파이썬의 모든 클래스는 object 클래스를 상속함 - 모든 것은 객체이다
   - 다중상속  

2. How?
   - 메서드 오버라이딩(덮어씌우기)
   - super()   
       - 재정의하는 모든 내용을 다시 설정하기 어려워서 일부만 덮어씌우기 위해 사용하는 것
       - super는 부모 클래스를 가르키는 것  
   - Myclass.mro()
       - Mycalls(object(생략)), 모든 것은 객체형태로 되어 있다.
       - class myclass(a, b, c) 
  
3. Why?
   - 자식 class를 정의해서 상속받는 이유는 부모에서 정의된 내용을 재정의해서 사용하기 위해
   - class siri에서 정의된 메서드외에 모든 메서드는 class robot에 있는 메서드를 사용함  
   - 다중상속은 완전 부품화로 뭉칠때는 효율적이나, 완전한 부품화를 하지 못하면 오버라이등의 문제로 안티패턴이 됨  

```python 
    class Robot:
    
        #code 생략
    
    class Siri(Robot):
        def __init__(self, name, age):
            #부모클래스 init이 적용
            super().__init__(name)
            self.age = age
            
        def call_me(self): 
            print("네?")
    
        def cal_mul(self, a, b):
            self.a = a
            return a * b
    
        @classmethod
        def hello_apple(cls):
            print(f"{cls} hello apple!!")
```

### 캡슐화

정의 : 정보를 은닉하여 접근을 제한 혹은 유효성 검사를 통해 변경하도록 하는 방식.  

1. What?
    - private(클래스, 인스턴스, 변수 전부 적용가능)
2. How?
    - private 변수 : .__이름 / ._이름
3. Why?
    - 내부에 접근을 할 수 없도록 함. 임의로 설정을 제한하기 위함임
    - 상속도 하지 않음  


1. What?
    - public
2. How?
    - public 변수 : ._ 이름 _
3. Why?
    - 기본적인 구조, 접근 가능


1. What?
    - @property 데코레이터
    - @메서드이름.setter
2. How?
    - 읽기만 : @property 데코레이터만 적용
    - 읽기와 변경모두 가능 : @메서드이름.setter
3. Why?
    - 유효한 값을 지정하기 위해. 
    - setter메서드에 조건문과 같은 조건을 통해 유효성 검사.
    - 코드를 견고하게 사용하는 방법  

```python 
    #code 생략
    def __init__(self, name, age):
        self.__name = name
        self.__age = age
        Robot.__population += 1

    @property
    def name(self):
        return f"yoon {self.__name}"

    @property
    def age(self):
        return self.__age

    @age.setter
    def age(self, new_age):
        if new_age - self.__age == 1:
            self.__age = new_age
        else:
            raise ValueError()
    #code 생략
```

### 다형성

정의 : 객체를 부품화할 수 있도록 하는 것, 같은 형태의 코드가 다른 동작을 하도록 하는 것.

1. What?
    - 다형성
2. How?
    - 자식클래스에서 구현동작을 다르게 진행함
3. Why?
    - 재사용성, 유지보수성 증가  

```python 
#code 생략
class Siri(Robot):
    def say_apple(self):
        print("hello my apple")

class SiriKo(Robot):
    def say_apple(self):
        print("안녕하세요")

class Bixby(Robot):
    def say_samsung(self):
        print("안녕하세요ㅕ")
```

### composition

정의 : 다른 클래스의 일부 메서드를 사용하고 싶지만, 상속은 하고 싶지 않을 경우

1. What?
    - composition
2. How?
    - 새로운 클래스를 선언해서 필요한 부분만 가져와 사용
3. Why?
    - 일부 자식 클래스만 수정해야하는 경우
    - 부모클래스를 오버라이딩 하는 경우 내부 구현 방식의 얕은 이해로 오류가 발생할 가능성 높음

## 객체의 메모리를 효율적으로 관리하기

필요한 속성만 관리하여 메모리를 효율적으로 관리하기 => 리팩토링

1. What?
    - slots
2. How?
    - solots메서드를 활용해서 필요한 클래스 메서드만을 리스트형식으로 관리
3. Why?
    - 불필요한 메서드를 정리하여 메모리 효율을 올림

        

