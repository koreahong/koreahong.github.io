---
layout: post
title:  "(SQL)SQL DBMS 아키텍처"
subtitle:   "요약정리"
categories: SQL
tags: theory
comments: true
---

> 단순 쿼리 작성공부가 아니라 깊은 이해를 위한 공부

> 해당내용을 모든 출처는 'SQL 레밸업'임

# 목적
- 단순 테스트를 위한 공부가 아니라 SQL를 보다 더 잘쓰기 위함

# 도움이 될만한 독자
- SQL기본을 아는 이
- DBMS, 각 쿼리에 대한 심층분석 및 이해를 원하는 모든 이

# 목차 및 책정보
- [교보문고 사이트 참고](http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788968482519&orderClick=LAG&Kc=)

# 1장 DBMS 아키텍쳐
## 1-1 DBMS 아키텍쳐 개요
### DBMS란?
    - SQL구문을 다양한처리를 진행하는 시스템
    - 우리가 관심을 갖어야 하는 부분은 '다양한처리'
    
### 아키텍쳐
![KakaoTalk_20210818_232026573](https://user-images.githubusercontent.com/51938331/129915509-816e5df3-f0a7-4e5f-9b2b-f8a2aa6972a0.jpg)

### 기능설명
- 쿼리평가엔진
    - SQL 구문분석
    - 데이터에 접근순서 결정  
    
    => 실행계획을 세우고 실행을 담당하는 모듈

- 버퍼 매니저
    - 메모리 영역 관리

- 디스크 용량 메니저
    - 데이터 저장 관리
    
- 트랜잭션 매니저 & 락 매니저
    - 트랜잭션관리, *트랜잭션 : DBMS내부 관리 단위
    - 트랜잭션 정합성 유지 및 실행
    
- 리커버리 매니저
    - 정기적 백업, 복구  
    
> 요약

- DBMS는 SQL구문이 들어오는 순간 구문을 분석하고 실행계획을 세워 실행시킨다. 이때 어느 공간에서 데이터를 갱신
및 검색할 것인지 성능에 관해서 버퍼, 디스크 매니저와 연동하여 결정한다. 동시에 여러 사용자가 데이터베이스에 접근하여 
  사용하기 때문에 트랜잭션이라는 단위로 관리를 한다. 또한 데이터를 정기적으로 백업하고 문제 발생시 복구하는 역할도 담당한다.
  
## 1-2 DBMS와 버퍼

### 트레이드오프 관계
![KakaoTalk_20210818_232026573_01](https://user-images.githubusercontent.com/51938331/129915551-7c5212ee-4ce5-49d8-848c-6bd2e5d3f246.jpg)

- 저장 <------> 속도 : 트레이드오프 관계
- 메모리 : 적은공간, 빠른속도 / 디스크 : 많은 공간, 느린속도

### DBMS와 기억장치의 관계

- DBMS는 데이터 저장을 목적으로 하는 미들웨어

- 하드디스크
    - 2차 기억장치
    - 기억비용이 상대적으로 쌈
- 메모리 
    - 1차 기억장치 
    - 기억비용이 비쌈
    - 내부 데이터를 모두 메모리에 올리는 것은 불가능
    
- 버퍼/캐시
![KakaoTalk_20210818_232026573_02](https://user-images.githubusercontent.com/51938331/129915575-3ef72d11-5be0-407a-93bf-c80ab257f6f2.jpg)
    > 배경 : 메모리의 속도가 빠른 장점을 활용해 성능향상을 목적으로 데이터를 저장하는 메모리  
    - 해당 메모리를 관리하는 것이 버퍼매니저이고 데이터베이스의 성능에 중요한 역향을 끼침  
    
    > 종류 : 데이터 캐시, 로그 버퍼  
    - 역할
        - 데이터 캐시 : 디스크에 있는 데이터의 일부를 메모리에 유지하기 위해 사용하는 메모리 영역
        - 로그 버퍼 : 변경정보 저장하는 메모리, 비동기 처리에 따른 방식
            - 비동기처리 : 로그 버퍼에 변경내용을 저장했다가 내부적으로 계속 수정하는 형태
            - 로그파일 : 메모리의 휘발성을 고려하여 영속적인 저장을 하는 변경사항 저장공간
        => 인사이트 : 로그버퍼, 데이터캐시의 비대칭적인 메모리크기에 따라 갱신,검색 비중을 고려한 설계를 파악할 수 있음

## 1-3 DBMS와 실행계획
> 배경 : RDB는 사용자는 What에만 치중하고 나머지는 시스템에 맡기는 형태  

### 데이터 접근 방법
[그림]

- 용어정리
    - 파서 : 구문분석하는 역할을 하여 후속처리에 효율화를 높임
    - 옵티마이저 : 데이터 접근법 최적화
                - 실행 계획 작성 -> 비용연산 -> 최적의 실행계획 선택
    - 카탈로그 매니저 : DBMS 내부 정보를 모아놓은 테이블 관리
    - 플랜평가 : 최적의 실행계획을 선택하는 것
    
- 플랜선택 과정
    - 옵티마이저는 카탈로그 기준으로 실행계획을 세움
    - 따라서 카탈로그 갱신시점을 반드시 고려하여 플랜평가가 진행되어야 함

## 1-4 실행계획 확인
> 배경 : SQL구문 지연이 발생했을 경우 실행계획을 확인해야 함  

### 대표적인 실행계획 확인

- 확인사항
  - 조작 대상 객체
  - 객체에 대한 조작의 종류
  - 조작 대상이 되는 레코드 수 : 카탈로그 정보에 기반한 수치



        
        



