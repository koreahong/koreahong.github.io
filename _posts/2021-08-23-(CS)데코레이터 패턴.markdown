---
layout: post
title: '파이썬 객체지향 프로그래밍'
subtitle: '(CS)구조화된 코드는 어떤 거인가'
categories: Computer_Science
tags : software
comments: False
---

> 파이썬 객체지향 프로그래밍
> 해당내용은 인프런 파이썬 객체프로그래밍 출처입니다

# 목적
- 해당 블로그는 파이썬 코딩을 좀 더 효율적이고 생산적으로 작성하기 위함임
- 코드는 깃헙에 있고 깃헙에 있지 않는 내용 위주로 작성

# 내용
- [데코레이터 패턴](#데코레이터-패턴)
- [객체지향](#객체지향)
  - OOP 원칙


# 데코레이터 패턴
- 테코레이터 패턴은 함수의 객체와 함수를 변경하는 다른 객체를 Wrapping 해줌
  - 예를들어 기존함수에 첨가를 해서 새로운 함수를 재정의 할때 모든 함수를 수정하기 보다는 Wrapping하여 모든 함수에 적용시킴
    즉, 기존의 함수를 꾸며주는 역할을 함  
    ```python 
    def copyright(func):
        def new_func():
            print("저작권내용")
            func()
        return new_func
    #골뱅이를 사용해서 함수를 재정의함
    @copyright
    def smlie():
        print("smile")
    
    @copyright
    def angry():
        print("angry")
    ```

# 객체지향
- OOP : 프로그램을 실제와 가깝게 모델링하는 것, 데이터를 추상화시켜 속성과 행위를 가진 객체로 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법
- class : 설계도, 특별한 데이터와 메서드의 집합
  - 절차지향생각 -> 반복적인 부분 발견 -> 집단에서 행위를 나눔 -> 속성을 나눔 -> 클래스 생성

- instance(object) 
  - 설계도로 실제 세상에 나온 무언가
  - class에 선언된 모양 그대로 생성된 실체
  - instance들은 각각 독립적이다 => 한 instance가 수정 및 변형되어도 다른 instance들은 아무런 영향을 받지 않는다.

## OOP 원칙
- 캡슐화, 추상화, 상속, 다형성

=> 4가지 원칙들을 지켜 변수와 메서드를 정의한 것이 class
=> 이러한 class들로 프로그래밍 한것이 OOP
=> 이런 OOP를 지원하는 것이 Python

### 추상화
- 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써
- 공통의 속성 값이나 행위를 하나로 묶어 이름을 붙이는 것  
```python 
class Robot:
    #클래스변수 - 인스턴스들이 공유하는 변수
    popluation = 0
    #인스턴스 생성
    def __init__(self, name, code)
        self.name = name
        self.code = code
        Robot.population += 1
    #행위 정의(인스턴스 메서드)
    def say_hi(self):
        #이외 코드
        print(f"Greetings, my masters call me {self.name}.")
    
    def cal_add(self, a, b):
        return a + b
    
    def die(self):
        print(f"{self.name} is being destroyed!")

    #cls는 클래스를 받음
    @classmethod
    def how_many(cls):
        print(f"We have {cls.population} Robot")
   
siri = Robot("siri", 12341251235)
jarvis = Robot("jarvis", 1233141312)
bixby = Robot("bixby", 12351123412)
```
=> 클래스를 사용할때 die의 결과가 어떻게 나오는지만 알면되지 구동방식이나 안에 복잡한 code는 몰라도 됨
=> die나 say_hi와 같이 인스턴스

- 추상화 잘하는 법
  + 이름 잘 짓기 : 이름만 보아도 직관적으로 어디에 쓰이는지 유추할 수 있어야함
  + 문서화하기 - docstring : 클래스, 메소드, 변수 등에 설명 부여하기
        - 사용법  
```python   
 def fetch_words(url):
    """
    url주소에서 파일을 가져와 단어 리스트를 반환합니다.
    :param url: 불러올 url
    :return:
    """ 
#docstring 호출
fetch_words.__doc__ 
```
#### 메서드

1. 종류(매직메서드)
  - __init__(self) : 생성자, 메모리에 올라오는 순간 즉시 실행
  - self : 인스턴스를 지칭하는 의미, 규칙임
  - cls : 클래스를 지칭하는 의미
  - 네임스페이스 : 객체를 이름에 따라 구분할 수 있는 범위
    - 필요이유 : 변수/함수 이름을 겹치지 않게 짜는게 어려움. 네임스페이스를 통해서 특정한 하나의 이름이 툥용될 수 있는 범위를 제한함
  - __dict__ : 네임스페이스를 확인할 수 있음.
  - dir() : 네임스페이스의 key 값을 확인 할 수 있음
  - __doc__ : docstring을 확인할 수 있음
  - __class__ : 어떤 클래스로 만들어진 인스턴스인지 확인할 수 있음

2. 개념
- 인스턴스를 통해서 클래스 접근가능
  - 인스턴스 네임스페이스에는 없으면 클래스에서 메서드나 변수를 찾게 파이썬이 구현됨