---
layout: post
title: '0707~, 파이썬 알고리즘 인터뷰 요약'
#subtitle: '구조화된 코드는 어떤 거인가'
categories: algorithm
#tags : software  
comments: False
---

> 파이썬 알고리즘 인터뷰 요약

# 요약의 목적
- 도움이 될만한 독자 : 코딩-중하 이상
- 해당 요약의 중점은 다음과 같다
    - 핵심개념 정리
    - 빠르게 훑고 지나가기
    - 파이써닉한 코딩
- 알고리즘 문제
    - 리트코드 / 번호찾기

# 1부 코딩 인터뷰  
## 1장. 코딩인터뷰  

- WHAT?
    - 코딩테스트 : TOOL에서 온라인/오프라인 테스트를 치는 것. 구현, 최적화 초점
    - 코딩인터뷰 : 면접관들 앞에서 문제를 푸는 방식. 문제를 푸는거에 초점
    
- WHY?
    - 알고리즘 : 체계적으로 문제를 풀어나갈 수 있는 역량
    - 구글 등에서 코딩테스트의 효용성을 입증함
 
- HOW?
    - 해커랭크, 프로그래머스와 같은 tool 활용

## 2장. 프로그래밍 언어 선택

- WHAT?
    - python 3.7

- WHY?
    - 면접관이 쉽게 이해할 수 있음
    - 대부분의 코딩 플랫폼에서 지원
    - 유연한 언어이다.
    - 언어레벨에서 풍부한 지원
 
- HOW?
    - 다양한 라이브러리 활용가능
    
# 2부 파이썬
## 3장. 파이썬이란
- WHAT?
    - 프로그래밍 언어
- WHY?
    - 읽기 쉬운 언어
    - 사용자가 원하는 모듈 패키지를 만들 수 있어야 하며, 다른 프로그램에서 사용할 수 있어야 함
- HOW?
    - pip로 라이브러리 다운
    
## 3장. 파이썬 문법
### 인덴트
- WHAT?
    - 공백
- WHY?
    - 가독성 높이기 / 가이드라인
- HOW?
    - 공백 4칸 들여쓰기
    - 파이참 리포맷 기능 활용

### 네이밍 컨벤션
- WHAT?
    - 변수명
- WHY?
    - 가독성
    - 파이썬 pep8 가이드 양식
    - 파이썬 철학
- HOW?
    - 스네이크 케이스 / '_' 추가방식
    
### 타입힌트
- WHAT?
    - 파라미터 타입 명시
- WHY?
    - 프로젝트 규모가 크면 가독성이 떨어지고 버그 유발의 주범이 됨
- HOW?
    - 파라미터와 리턴값을 명시
    
### 리스트 컴프리핸션
- WHAT?
    - 기존 리스트를 기반으로 새로운 리스트를 만들어내는 구문
- WHY?
    - map, filter를 사용하는 것보다 가독성이 훨씬 좋음
- HOW?
    - [기존 리스트 for문 if문 등]
    
### 제너레이터
- WHAT?
    - 루프의 반복동작을 제어할 수 있는 루틴 형태
- WHY?
    - 제너레이터만 생성해두고 필요할 때 언제든 숫자를 만들어낼 수 있다.
    - 저장공간을 아낄 수 있음
- HOW? 
    - yield와 next 구성
    - 생성 조건만 보관
    
### print
- WHAT?
    - 출력 결과를 보여주는 것
- WHY?
    - 중간중간 디버깅하기 위함(비추)
- HOW?
    - f-string ex : ```python print(f'{idx+1}: {fruit}')```
    
### pass
- WHAT?
    - Null연산으로 아무것도 하지 않는 기능
- WHY?
    - 목업 인터페이스부터 구현한 다음에 추후 구현을 진행하기 위해서
- HOW?
    - ```python def method_a() pass```
    
### 코딩스타일
- WHAT?
    - 코딩하는 스타일
- WHY?
    - 개발은 같이 하는 부분이기 때문에 많은 사람들이 선호하는 방식을 선택해야 함
- HOW?
    - PEP8과 같은 가이드라인 참고
    
### 변수명과 주석
- WHAT?
    - 변수명과 주석
- WHY?
    - 가독성을 높이기 위해
- HOW?
    - 간단한 주석 부여
    - 영어로 작성

## 4장. 빅오, 자료형
### 빅오
- WHAT?
    - 입력값에 대한 알고리즘의 실행 상한 시간
- WHY?
    - 시간복잡도와 공간복잡도 증가 추이 확인
    - 알고리즘의 효율성을 분석하기 위해
- HOW?
    - 입력값이 무한대로 향할때 함수의 상한 측정
    - 최고차항만 표기, ex) an^2 + bn => O(n^2)
- plus
    - 빅오표기법은 적당히 정확하게 표현하는 방법
    - 최악, 평균적인 시간복잡도와 관계없음 

### 분할 상환 분석
- WHAT?
    - 함수의 동작을 설명할 때 중요한 분석 방법 중 하나
- WHY?
    - 알고리즘 전체를 보지 않고 최악의 경우만을 살펴 보는 것은 옳지 않다
- HOW?
    - 최악의 경우를 여러 번에 걸쳐 골고루 나눠주는 형태

### 파이썬 자료형
#### 숫자
##### int
- WHAT? 
    - 숫자 정수형으로 int만 제공
- WHY?
    - long과 int 통합
- HOW?
    - 임의 정밀도 지원
- PLUS
    - 임의 정밀도 : 무제한 자릿수를 제공하는 정수형
##### Bool
- WHAT?
    - 논리 자료형, 1 or 0으로 처리되는 int의 서브 클래스
- HOW?
    - ```python True == 1 : True```
#### 매핑
- WHAT?
    - 키와 자료형으로 구성된 복합 자료형, 5장에서 디테일하게 설명
#### 집합
- WHAT?
    - 중복된 값을 갖지 않는 자료형, 5장에서 디테일하게 설명
#### 시퀀스
- WHAT?
    - 수열, 배열의 역할 수행

#### 객체
- WHAT?
    - object 개념
- WHY?
    - 파이썬은 원시타입 대신 객체를 선택함
- HOW?
    - 불변 객체, 가변 객체  
- PLUS
        
|클래스|불변객체|
|:----|:-----|
|bool|O|
|int|O|
|float|O|
|list|X|
|tuple|O|
|str|O|
|set|X|
|dict|X|

#### 불변객체
- WHAT?
    - 고유의 값이 변하지 않는 객체
    - bool, int, float 등
- WHY?
    - 파이썬은 메모리 상의 위치한 객체의 주소를 얻어오는 것
- HOW?
    - 변수는 참조일 뿐이고 실제로 값을 갖고 있는 int, str은 모두 불변 객체
#### 가변객체
- WHAT?
    - 객체의 값이 변경될 수 있는 객체
    - list, set, dict
- HOW?
    - 다른 변수가 참고 있을 때 그 변수의 값 또한 변경됨
    
## 5장. 리스트, 딕셔너리
### 리스트
- WHAT?
    - 순서대로 저장하는 시퀀스이자 변경 가능한 목록
- WHY?
    - 파이썬은 모든 것이 객체이기 떄문에 리스트는 각 객체의 포인터들을 모아놓은 배열임
    - 속도보다 보다 많은 기능을 추가하기 위한 방법을 취함
- HOW?
    - 객체로 되어 있는 모든 자료형을 포인터로 연결

### 딕셔너리
- WHAT?
    - 키/값 구조로 이뤄진 자료구조
- HOW?
    - 입력 순서가 유지, 내부적으로는 해시 테이블로 구현
- PLUS
    - {}로 선언하지만 키값 O : 딕셔너리, 키값 X : set

## 6장. 문자열 조작
- WHAT?
    - 문자열을 변경하거나 분리하는 등의 여러 과정
- WHY?
    - 다양한 분야에서 사용되고 실무에 많음
### HOW?
#### 6-1. 유효한 팰린드롬 / leetcode 125

- 슬라이싱 활용
1. re.sub으로 불필요 문자 제거, [정규표현식](추가예정
2. 슬라이싱 활용 [::-1] : 뒤집기)
3. `[::숫자] : 리스트에서 0번째부터 숫자 만큼 건너가면서 추출하기`  
```python  
class Solution:
    def isPalindrome(self, a: str) -> bool:
        a = a.lower()
        a = re.sub('[^a-z0-9]', '', a)

        if a == a[::-1]:
            return True
        else:
            return False
```

- 리스트 + deque 활용하여 최적화
1. `isalnum 숫자인지 확인하는 함수`
2. 새로운 리스트에 거꾸로 추가
3. 비교할 때 deque로 빠르게 popleft할 수 있어서 시간단축  
```python  
class Solution:
    def is_palindrome(self, a: str) -> bool:
        strs: Deque = collections.deque()
        for char in a:
            if char.isalnum():
                strs.append(char.lower())

        while len(strs) > 1:
            if strs.popleft() != strs.pop():
                return False
        return True
```

#### 문자열 뒤집기 / leetcode 344
- 슬라이싱 활용
1. s[:]와 같이 플랫폼마다 트릭을 사용해야만 정상 작동하는 경우가 있다. 
```python  
class Solution:
    def reverseString(self, s: List[str]) -> None:
        s[:] = s[::-1]
```

- 내부기능 사용
1. reverse는 반환없이 뒤집음
```python  
class Solution:
    def reverseString(self, s: List[str]) -> None:
        s.reverse()
```

- 투포인터 활용
1. 두 변수를 사용해서 일일히 바꿔주는 방식
```python  
class Solution:
    def reverseString(self, s: List[str]) -> None:
        left, right = 0, len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            right -= 1
            left += 1
```

#### 로그 파일 재정렬 / leetcode 937

- 람다 + 연산자 사용
1. `isdigit으로 숫자열인지 확인` [isalnum과 isdigit 차이](https://velog.io/@oaoong/python-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%B2%B4%ED%81%AC-isdigit-isalpha-isalnum-isnumeric-is-decimic-%ED%95%A8%EC%88%98)
2. sort 파라미터 key를 람다함수로 정렬
3. 연산자로 리스트 합치기  
```python  
class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        letter, digit = [], []
        for log in logs:
            if log.split()[1].isdigit():
                digit.append(log)
            else:
                letter.append(log)
                
        letter.sort(key = lambda x: [x.split()[1:], x.split()[0]])
        
        return letter + digit
```

#### `가장 흔한 단어 / leetcode 819`

- solution 1 : `re.sub + 리스트컴프리헨션 + Counter`
1. `정규표현식 \w : 단어`
2. `리스트컴프리헨션으로 banned에 있는 단어는 제외하고 리스트형성`
3. counter.most_common 기능으로 가장 많은 단어 찾기
```python  
class Solution:
    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
        paragraph = paragraph.lower()
        paragraph = re.sub('[^\w]', ' ', paragraph)
        words = [word for word in paragraph.split() if word not in banned]  
        
        # counter = Counter(words)
        # return counter.most_common(1)[0][0]
    
        # OR 
        
        counts = collections.defaultdict(int)
        for word in words:
            counts[word] += 1
        return max(counts, key=counts.get)
```

- solution 2 : re.sub + 리스트컴프리헨션 + defaultdict
1. 동일
2. 동일
3. defaultdict으로 딕셔너리 생성해서 key별 count 세기
4. `max함수로 찾되 파라미터 key를 get기능을 활용. get은 딕셔너리 key값의 value를 가져옴`


#### `그룹 애너그램 / leetcode 49`

- solution : `dict key값 + 문자정렬`
1. 각 문자들을 sorted() 기능으로 정렬한 후에 딕셔너리 키값으로 넣는다
2. for문으로 정렬된 키값 기준으로 append
3. dict.values() 기능으로 값 추출
- `PLUS`
    - `문자는 sorted('문자') 정렬할 수 있음. 반환값은 list`
    - `dict의 키값은 꼭 숫자나 단순한 것이 아니어도 됨.` 
- 풀이   
```python  
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        anagrams = collections.defaultdict(list)
        
        for word in strs:
            anagrams[''.join(sorted(word))].append(word)
        
        result = list(anagrams.values())
        
        return result
```

#### `가장 긴 팰린드롬 / leetcode 5`

- solution : 2중 반복 + max
1. 짝수, 홀수 각각 설정
2. while로 팰린드롬 확인
3. 가장 긴 팰린드롬 추출
```python  
class Solution:
    def longestPalindrome(self, s: str) -> str:
        def expand(left: int, right: int) -> str:
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            
            return s[left + 1:right]
        
        if len(s) < 2 or s == s[::-1]:
            return s
        
        result = ''
        
        for i in range(len(s) - 1):
            result = max(result, ''
                            expand(i, i + 1),
                            expand(i, i + 2),
                            key = len)
            
        return result
```

## 7장. 배열

### leetcode 1. Two Sum

- 내풀이
    - 리스트 + in
    - 숫자를 뺀 나머지가 리스트에 있는지 확인  
```python  
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for idx1, num1 in enumerate(nums):
            other = target - num1
            if other in nums[idx1 + 1:]:
                    
                return [idx1, nums[idx1 + 1:].index(other) + idx1 + 1]
```

- 해설과 똑같이 풀었다... 칭찬해

### `42. Trapping Rain Water`

- 내풀이
    - max, min 활용
    - min(max(해당지점 전까지 수), max(해당지점 다음부터 끝까지)) - 해당지점
```python  
class Solution:
    def trap(self, height: List[int]) -> int:

        result = 0
        
        for idx, num in enumerate(height[1:-1]):
            left_max = max(height[:idx + 1])
            right_max = max(height[idx + 1:])
            if left_max > num and right_max > num and min(left_max, right_max) > num:
                result += min(left_max, right_max) - num
                
        return result
```

- solution 1 / `recheck`
    - 스택 + min
    - 스택으로 쌓다가 전 블록보다 큰 길이의 블록이 나오면 전에 있던 블록을 꺼내면서 길이 * 높이 구하기  
```python  
class Solution:
    def trap(self, height: List[int]) -> int:

        stack = []
        volume = 0
        
        for i in range(len(height)):
            while stack and height[i] >= height[stack[-1]]:
                
                top = stack.pop()
                
                if not len(stack):
                    break
                    
                distance = i - stack[-1] - 1
                waters = min(height[i], height[stack[-1]]) - height[top]
                
                volume += distance * waters
                
            stack.append(i)
            
        return volume
```

- solution 2 / `recheck`
    - 양쪽에서 좁혀들어오면서 구하기

- explation
    1. 양쪽에서 좁혀들어온다
    2. 왼쪽 최고 높이 <= 오른쪽 최고 높이
        - 왼쪽 최고에서 현재 최고를 빼주면 해당 지점의 물 저장량을 구할 수 있음
        - 이게 가능한 이유는 해당지점의 양극의 최고높이는 해당지점의 물저장량을 결정짓기 때문  
```python   
class Solution:
    def trap(self, height: List[int]) -> int:
        if not height:
            return 0
        left = 0
        right = len(height) - 1
        
        max_left = height[left]
        max_right = height[right]
        
        
        cnt = 0
        
        while left < right:
            if max_left <= max_right:
                left += 1
                max_left = max(max_left, height[left])
                cnt += max_left - height[left]
            else:
                right -= 1
                max_right = max(max_right, height[right])
                cnt += max_right - height[right]
        
        return cnt
```

### 15. 3Sum

- solution 1
    - 정렬
    - 해당지점의 다른 장소에서 덧셈을 통해 0보다 큰지 작은지에 확인  
```python  
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        if len(nums) <= 2:
            return
        
        result = []
        nums.sort()
        
        for i in range(len(nums) - 2):
            
            
            if i > 0 and nums[i] == nums[i - 1]:
                continue
                
            left, right = i + 1, len(nums) - 1
            
            while left < right:
                sum = nums[i] + nums[left] + nums[right]
                
                if sum < 0:
                    left += 1
                elif sum > 0:
                    right -= 1
                else:
                    result.append([nums[i], nums[left], nums[right]])
                    
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                        
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                        
                    left += 1
                    right -= 1
                
        return result
 ```

- solution 2
    - 양수, 음수로 나누기
    - 0이 3개 인것은 별도로 추가
    - 양수와 음수를 더한 것에서 0으로 만드는 수를 구하는데 조건이 있음
        - 양수와 음수와 다른수거나
        - 같은 수 인데 해당숫자가 2개 이상 있을 경우  
```python  
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = set()
        vals = Counter(nums)
        positive, negative = [n for n in vals if n > 0], [n for n in vals if n < 0]
        
        if vals[0] > 2:
            res.add((0, 0 ,0))
        for n1 in positive:
            for n2 in negative:
                c = 0 - (n1 + n2)
                if c in vals and ((c != n1 and c != n2) or vals[c] > 1):
                    res.add(tuple(sorted([n1, n2, c])))
        return res
```

### 561. Array Partition I

- 내풀이
    - 정렬
    - 첫번째 수 만 추출해서 합계  
```python  
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        
        result = sum(nums[::2])
        
        return result
```
- solution
    - 내풀이와 동일
    - 한줄 양식  
```python  
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        return sum(sorted(nums)[::2])
```

### `238. Product of Array Except Self`

- solution1 / `recheck`
    - 왼쪽부터 오른쪽까지 한칸 밀어서 곱셈하기
    - 오른쪽부터 왼쪽까지 한칸 밀어서 곱셈하기
    - 둘이 곱해주기
    
- explanation
    - 왼쪽부터 오른쪽까지 한칸 밀어서 곱셈하면 각지점은 해당지점의 전 숫자들을 모두 곱한 수가 된다
    - 오른쪽부터 왼쪽까지 한칸 밀어서 곱셈하면 각지점은 해당지점의 전 숫자들을 모두 곱한 수가 된다
    - 이를 한 배열만 사용하기 위해선 별도의 변수를 선언해서 1부터 곱하고 계산하면  
```python  
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        result = []
        p = 1
        
        for i in range(0, len(nums)):
            result.append(p)
            p *= nums[i]
            
        p = 1
        for i in range(len(nums) - 1, 0 - 1, -1):
            result[i] = result[i] * p
            p *= nums[i]
    
        return result  
```

- 비슷한풀이  
```python  
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1]
        for i in range(len(nums)-1):
            left = res[-1] * nums[i]
            res.append(left)
        right = nums[-1]
        for i in range(len(nums)-2, -1, -1):
            res[i] *= right
            right *= nums[i]
            
        return res
```


### 121. Best Time to Buy and Sell Stock

- solution / `recheck`
    - 최솟값을 저장해서 현재가격과 최소가격의 차 구하기
    
- PLUS
    - `max() 자체가 for문 역할을 하기 때문에 for + max(list)할 경우 이중for문과 같은 성능이 된다.`
```python  
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        result = 0
        min_price = sys.maxsize
        
        for price in prices:
            min_price = min(price, min_price)
            result = max(result, price - min_price)
            
        return result
```
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
- WHAT?
- WHY?
- HOW?
