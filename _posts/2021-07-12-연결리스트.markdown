---
layout: post
title: '연결리스트'
subtitle: '자료구조'
categories: Data_Structures
#tags: theory
comments: True
---

> 연결리스트 정리


-------------------------------------------------------------------------------

[gitcode참조](https://github.com/koreahong/Data_Structures_with_python)

#연결리스트

- 정의
    - 동적 메모리 할당을 이용해 노드들을 한 방향으로 연결하여 리스트를 구현하는 자료구조
    
- 장점
    - 삽입이나 삭제 시 항목들의 이동이 필요없음, 빠른 실행 O(1)
- 단점
    - 탐색시 모든 노드들을 거쳐야함, 느린 실행 O(n)
    
## 단순열결 리스트 구현
```python  
class Slist:
    #노드 생성자
    #항목과 다음 노드 레퍼런스
    class Node:
        def __init__(self, item, link):
            self.item = item
            self.next = link
    #단순연결리스트 생성자
    #head와 항목수(size)로 구성
    def __init__(self):
        self.head = None
        self.size = 0

    def size(self): return self.size
    def is_empty(self): return self.size == 0

    def insert_front(self, item):
        #empty인경우
        if self.is_empty():
            #노드를 생성하는데, 해당노드의 item은 item, next는 None이다
            self.head = self.Node(item, None)
        else:
            #노드를 생성하는데, 해당노드의 item은 item, next는 삽입되기전 node이다***
            self.head = self.Node(item, self.head)
        self.size += 1

    def insert_after(self, item, p):
        #노드를 생성하는데, 해당노드의 item은 item, next는 p의 다음 노드
        p.next = self.Node(item, p.next)
        self.size += 1

    def delete_front(self):
        if self.is_empty():
            raise EmptyError('Underflow')
        else:
            #앞에서 삭제하는데 head는 이전헤드의 다음 노드를 가르킴
            self.head =  self.head,next
            size -= 1

    def delete_after(self, p):
        if self.is_empty():
            raise EmptyError('Underflow')
        #다음노드를 지정
        t = p.next
        #다다음노드를 지우려고하는 노드의 포인터로 가르킴
        p.next = t.next
        self.size -= 1

    def search(self, target):
        p = self.head
        for k in range(self.size):
            if target == p.item: return k
            p = p.next
        #탐색실패
        return None

    def print_list(self):
        p = self.head
        while p:
            if p.next != None:
                print(p.item, ' -> ', end='')
            else:
                print(p.item)
            p = p.next

#에러처리
class EmptyError(Exception):
    pass

if __name__ == '__main__':
    s = Slist()
    s.insert_front('orange')
    s.insert_front('apple')
    s.insert_after('cherry', s.head.next)
    s.insert_front('pear')
    s.print_list()
    print('cherrty는 %d번째' % s.search('cherry'))
```
- 결과
    - pear  -> apple  -> orange  -> cherry
    - cherrty는 3번째
    
    
### 이중연결리스트

- 전과 후의 모든 노드를 가르킴
- 역순으로 찾을 수 있는 장점

```python  
class Dlist:
    class Node:
        def __init__(self, item, prev, link):
            self.item = item
            self.prev = prev
            self.next = link

    def __init__(self):
        self.head = self.Node(None, None, None)
        self.tail = self.Node(None, self.head, None)
        self.head.next = self.tail
        self.size = 0

    def size(self): return self.size
    def is_empty(self): return self.size == 0

    def insert_before(self, p, item):
        t = p.prev
        n = self.Node(item, t, p)
        t.next = n
        p.prev = n
        self.size += 1


    def insert_after(self, p, item):
        t = p.next
        n = self.Node(item, p, t)
        p.next = n
        t.prev = n
        self.size += 1

    def delete(self, x):
        f = x.next
        r = x.prev
        f.prev = r
        r.next = f
        self.size -= 1
        return x.time
    
    def search(self, target):
        if self.head == None:
            print("list is empty")

        else:
            p = self.head
            for i in range(self.size + 2):
                print(p.item)
                print(i)
                if target == p.item: return i
                p = p.next
            return -1

    def print_list(self):
        if self.is_empty():
            print('list is empty')
        else:
            p = self.head.next
            while p != self.tail:
                if p.next != self.tail:
                    print(p.item, ' <=> ', end='')
                else:
                    print(p.item)
                p = p.next

                
#에러처리
class EmptyError(Exception):
    pass    

if __name__ == '__main__':
    s = Dlist()
    s.insert_after(s.head, 'apple')
    s.insert_before(s.tail, 'orange')
    s.insert_before(s.tail, 'cherry')
    s.insert_after(s.head.next, 'pear')
    s.print_list()
    print(f"cherry는 {s.search('cherry')}번째")      
```

### 원형리스트

- 특징
    - 마지막 노드를 참조하는 last가 단순연결리스트의 head의 역할을 한다
- 장점
    - None검사를 하지 않아도 됨
- 단점
    - 반대방향으로 노드들을 방문하기 쉽지 않고 무한루프가 발생할 수 있음

```python  
class Clist:
    class Node:
        def __init__(self, item, link):
            self.item = item
            self.next = link
    
    def __init__(self):
        self.last = self.Node(None, None)
        self.size = 0

    def no_items(self): return self.size
    def is_empty(self): return self.size == 0

    def insert(self, item):
        n = self.Node(item, None)
        if self.is_empty():
            n.next = n
            self.last.next = n
        else:
            n.next = self.last.next.next
            self.last.next.next = n

        self.size += 1

    def first(self):
        if self.is_empty():
            raise EmptyError('Underflow')
        f = self.last.next
        return f.item

    def delete(self):
        if self.is_empty():
            raise EmptyError('Underflow')
        x = self.last.next
        if self.size == 1:
            self.last = None
        else:
            self.last.next = x.next

        self.size -= 1
        return x.item

    def print_list(self):
        if self.is_empty():
            print("list is empty")
        else:
            f = self.last.next.next
            p = f
            while p.next != f:
                print(p.item, ' -> ', end='')
                p = p.next
            print(p.item)
                   
#에러처리
class EmptyError(Exception):
    pass                              

if __name__ == '__main__':
    s = Clist()
    s.insert('apple')
    s.insert('orange')
    s.insert('cherry')
    s.insert('pear')
    s.print_list()
```    
 

