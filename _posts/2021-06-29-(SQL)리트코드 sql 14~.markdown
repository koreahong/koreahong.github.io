---
layout: post
title: '(SQL)리트코드 sql 14~25'
subtitle: '리트코드'
categories: sql
tags: practice
comments: True
---

> 리트코드 sql 문제풀이


-------------------------------------------------------------------------------

# 595. Big Countries
## basic

- 내풀이

```sql
select name, population, area
from world
where area >= 3000000 or population >= 25000000
```

# 596. Classes More Than 5 Students
## basic

- 내풀이

```sql
select class
from 
    ( select class, count(distinct student) as num
      from courses
      group by class
     ) temp_table
where num >= 5
```

# 601. Human Traffic of Stadium
## 윈도우함수 / 연속적인출력

- solution 1
```sql
WITH temp
     AS (SELECT *,
                ( id - Row_number()
                         OVER() ) rn
         FROM   stadium
         WHERE  people >= 100)
SELECT id,
       visit_date,
       people
FROM   temp
WHERE  rn IN (SELECT rn
              FROM   temp
              GROUP  BY rn
              HAVING Count(*) >= 3) 
```
- 진짜 기가막힌 방법이다...
    1. people이 100이하인거를 제거한 상태에서 id - rownumber를 빼주면 연속된 숫자이다면 차가 같다.
    2. 차가 같은것 끼리 묶어주고 3개이상인 것만 추출
    3. 해당한 id의 내용 출력 
    

- solution 2
```sql
select t1.*
from stadium t1, stadium t2, stadium t3
where t1.people >= 100 and t2.people >= 100 and t3.people >= 100
and
(
    (t1.id - t2.id = 1 and t1.id - t3.id = 2 and t2.id - t3.id =1)  -- t1, t2, t3
    or
    (t2.id - t1.id = 1 and t2.id - t3.id = 2 and t1.id - t3.id =1) -- t2, t1, t3
    or
    (t3.id - t2.id = 1 and t2.id - t1.id =1 and t3.id - t1.id = 2) -- t3, t2, t1
)
;
```

- id도 연속적인 것을 활용해 id차가 연속적인것들을 골라준다.
- 단 모든 경우의수를 찾지 않는 것은 셀프조인으로 시메트릭하기 때문 -> 2 1 3 = 2 3 1

# 620. Not Boring Movies
## 기본함수

- 내풀이

```sql
select *
from cinema
where id % 2 != 0 and description != 'boring'
order by rating desc
```
- id % 2 != 0 부분을 `mod(id,2) = 1` 로 작성할 수 있음

# 626. Exchange Seats
## if / case

- solution 1
```sql
SELECT s1.id,
       Coalesce(s2.student, s1.student) AS student
FROM   seat s1
       INNER JOIN seat s2
               ON ( s1.id + 1 )^1 - 1 = s2.id 
```

- `(숫자+1)^1-1 자체가 비트연산을 통해 짝수 <-> 홀수를 바꿔주는 연산이 됨`, 두고두고 써먹기
- [비트연산](https://koreahong.github.io/sql/2021/06/29/%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0/)


- solution 2
```sql
select  
        case
            when MOD(id,2) = 0 then id - 1
            when MOD(id,2) != 0 and id = (select max(id)
                                          from seat) then id
            else id + 1
        end id,
        
        student
from    seat
order   by id
```
- case when 활용

- solution 3
```sql
SELECT IF (id%2 <> 0, IF(id <> (SELECT Max(id)
                                FROM   seat), id + 1, id), id - 1) id,
       student
FROM   seat
ORDER  BY id; 
```
- if 문으로 풀이
- 이게 간단하고 활용성이 있는거 같다

# 627. Swap Salary
## if / case

- 내풀이

```sql
update salary
set
   sex = case sex
            when 'm' then 'f'
            else 'm'
         end;   
```
- update는 set과 같이 다닌다
- [update구문](https://koreahong.github.io/sql/2021/06/29/update%EA%B5%AC%EB%AC%B8/)

```sql
update salary 
set sex = IF (sex = "m", "f", "m");
```

# 1179. Reformat Department Table
## pivot table
- 내풀이
```sql
select  id,
        max(case when month = 'Jan' then revenue end) 'Jan_Revenue',
        max(case when month = 'Feb' then revenue end) 'Feb_Revenue',
        max(case when month = 'Mar' then revenue end) 'Mar_Revenue',
        max(case when month = 'Apr' then revenue end) 'Apr_Revenue',
        max(case when month = 'May' then revenue end) 'May_Revenue',
        max(case when month = 'Jun' then revenue end) 'Jun_Revenue',
        max(case when month = 'Jul' then revenue end) 'Jul_Revenue',
        max(case when month = 'Aug' then revenue end) 'Aug_Revenue',
        max(case when month = 'Sep' then revenue end) 'Sep_Revenue',
        max(case when month = 'Oct' then revenue end) 'Oct_Revenue',
        max(case when month = 'Nov' then revenue end) 'Nov_Revenue',
        max(case when month = 'Dec' then revenue end) 'Dec_Revenue'
from 
        (select *, (row_number() over ( partition by month order by id)) rn
        from department
        ) rn_table
group by rn_table.id
```
- pivot table 만들기

# 1270. All People Report to the Given Manager
## basic

- 내풀이

```sql
SELECT e1.employee_id
FROM   employees e1
       INNER JOIN employees e2
               ON e1.manager_id = e2.employee_id
       INNER JOIN employees e3
               ON e2.manager_id = e3.employee_id
WHERE  e3.manager_id = 1
       AND e1.employee_id != 1 
```
- 해당문제는 3개를 초과하지 않아서 조인을 2번사용하였는데 만약 개수제한이 없다면?
- 특히 where절은 e3.manager_id로 작성해야 됨. 7->4->2까지만 조인이되고 2의 manager_id가 1이기 때문

# 1412. Find the Quiet Students in All Exams
## 윈도우함수
- solution
```sql
SELECT s.student_id,
       s.student_name
FROM   (SELECT student_id,
               ( score = Max(score)
                           OVER(
                             partition BY exam_id) ) + ( score = Min(score)
                                                                   OVER(
                                                                     partition
                                                                   BY
                                                                   exam_id) ) AS
               quiet
        FROM   exam) e
       INNER JOIN student s
               ON e.student_id = s.student_id
GROUP  BY student_id
HAVING Sum(quiet) = 0; 
```
- 똑똑한 풀이법이다.
    1. partition by로 student_id와 동일행의 exam_id별 최대값, 최솟값을 구한다
    2. student_id와 동일행의 score가 최대값 혹은 최솟값과 같으면 1
    3. 마지막으로 group by로 student_id로 묶은 후 sum결과가 0인 student만 출력하기
  
- solution
```sql
WITH temp
     AS (SELECT exam_id,
                exam.student_id,
                student_name,
                Rank()
                  OVER(
                    partition BY exam_id
                    ORDER BY score )     AS rk1,
                Rank()
                  OVER(
                    partition BY exam_id
                    ORDER BY score DESC) AS rk2
         FROM   exam
                LEFT JOIN student
                       ON student.student_id = exam.student_id)
SELECT DISTINCT student_id,
                student_name
FROM   temp
GROUP  BY student_id
HAVING Min(rk1) <> 1
       AND Min(rk2) <> 1
ORDER  BY student_id 
```
- 윈도우 함수로 exam_id별 rank를 측정해서 rank값이 어느하나 1이 되지 않는 학생 추출
- `(`score =max()`)`부분 괄호를 반드시 쳐줘야 boolean값이 제대로 반환됨

# 1757. Recyclable and Low Fat Products
## basic

- 내풀이 
```sql
select product_id
from   products
where  low_fats = 'Y'
       and recyclable = 'Y'
```

# 610. Triangle Judgement
## if / case

- 내풀이 

```sql
SELECT *,
       ( CASE
           WHEN x + y <= z
                 OR y + z <= x
                 OR x + z <= y THEN 'No'
           ELSE 'Yes'
         end ) AS `triangle`
FROM   triangle 
```

# 1336. Number of Transactions per Visit
## 조인 

- solution
```sql
with temp
        as (select v.user_id,
                   v.visit_date,
                   if(t.amount is null, 0, count(*)) as transaction_count
            from   visits v
                   left join Transactions t
                          on v.user_id = t.user_id 
                             and v.visit_date = t.transaction_date
            group  by 1,2
            ),
     row_nums 
        AS (SELECT ROW_NUMBER() OVER () as rn 
            FROM Transactions 
            UNION 
            SELECT 0) 
            
SELECT rn as transactions_count, 
       IF(transaction_count is null, 0, count(*)) as visits_count
FROM   temp
       RIGHT JOIN row_nums 
               ON transaction_count = rn
WHERE rn <= (SELECT MAX(transaction_count) FROM temp)
GROUP BY rn
order by 1
```

1. user.id와 visit_date 묶어서 하루 얼마나 방문했는지(transcount) 산출
2. row_num으로 빈 수열 생성(rn)
3. rn과 transcount를 조인하고 group by로 하루당 방문 횟수별로 몇명이 방문했는지 산출













