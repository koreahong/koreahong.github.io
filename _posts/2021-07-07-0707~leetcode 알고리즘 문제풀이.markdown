---
layout: post
title: '0707~, leetcode 알고리즘 문제풀이'
#subtitle: '구조화된 코드는 어떤 거인가'
categories: algorithm
#tags : software  
comments: False
---

> leetcode 알고리즘 문제풀이

# 요약의 목적
- 도움이 될만한 독자 : 코딩-중하 이상
- 해당 페이지의 중점은 다음과 같다
    - '파이썬 알고리즘 인터뷰' 장별 추가 문제풀기
    - '파이썬 알고리즘 인터뷰'에서 사용한 방법을 최대한 이용 
- 알고리즘 문제
    - 리트코드 / 번호찾기

## 6장. 문자열 조작 / 추가문제
### `leetcode 3. Longest Substring Without Repeating Characters`
- 내풀이
  - 풀이 : 오른쪽으로 반복된 문자가 나오기 전까지 숫자를 카운팅
  - 문제점 : 이중for문으로 느림, 확인했던 부분을 재확인 함 => 불필요함
```python  
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        def expand(left: int, right: int) -> str:
            chrs
            while right < len(s) and s[right] not in s[left:right]:
                right += 1
            return len(s[left:right])
        
        if len(s) <= 1:
            return len(s)
        
        result = 0
        for i in range(len(s)):
            result = max(result,
                            expand(i, i + 1))
        
        return result
```

- `solution / recheck`
  - 풀이
    1. 문자와 숫자를 같이 저장 
    2. 중복된 문자가 나오면 for문은 idx번호와 저장되었던 idx번호를 뺌
       - 이전에 확인했던 문자들은 빼는 행위로 재확인이 필요없게 됨 
    3. 중복되었던 문자의 value값, 카운팅 시작값 갱신
  
- explanation
  - string in strs and strs[string] >= start : 중복된 문자 발견을 했는데, 이전의 중복된 문자가 우리가 카운팅하려는 범위안에 있어야됨
  - max(result, len(s) - start) : 처음부터 끝까지 중복된 문자가 없을 경우를 대비 
```python  
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        
        #예외처리
        if len(s) < 2:
            return len(s)
        
        strs = {}
        start, result = 0, 0
        
        for i, string in enumerate(s):
            if string in strs and strs[string] >= start:
                result = max(result, i - start)
                start = strs[string] + 1
            strs[string] = i
            
        return max(result, len(s) - start)
```

### `953. Verifying an Alien Dictionary`

- solution 1
  - 풀이
    1. 새로 정의된 순서를 dict에 저장
    2. 붙어 있는 단어만 비교해서 순서 비교  
```python  
class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        order_map = {}
        for index, val in enumerate(order):
            order_map[val] = index

        for i in range(len(words) - 1):

            for j in range(len(words[i])):
                if j >= len(words[i + 1]): return False

                if words[i][j] != words[i + 1][j]:
                    if order_map[words[i][j]] > order_map[words[i + 1][j]]: return False
                    break

        return True
```

- `solution 2`/ recheck
    - 단어의 각 문자를 order 인덱스 번호로 처리
    - sort + lambda 함수 + 리스트컴프리핸션으로 정렬   
```python  
class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        return words == sorted(words, key=lambda word: [order.index(char) for char in word])
```


### leetcode 415. Add Strings

- 내풀이
  1. 길이 비고 후 적은 곳에 0 채워 넣기
  2. 더하기 for 문(거꾸로)  
```python  
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        
        #각 부족한 자릿수 만큼 0으로 채우기
        if len(num1) > len(num2):
            num2 = '0' * (len(num1) - len(num2)) + num2
        if len(num2) > len(num1):
            num1 = '0' * (len(num2) - len(num1)) + num1
        
        result = ''
        add = '0'
        for i, j in zip(num1[::-1], num2[::-1]):
            num = int(i) + int(j) + int(add)
            if  num >= 10:
                add = '1'
                result = str(num % 10) + result
            else:
                result = str(num) + result
                add = '0'
        
        if add == '1':
            result = add + result
        
        return result
```

- [Discuss 등재](https://leetcode.com/problems/add-strings/discuss/1324890/python-solution)


### `leetcode 1396. Design Underground System`
`- 함수내의 구조를 새겨야 하는 문제`

- solution / recheck
  1. 딕셔너리를 활용해 데이터 기록 , `키의 디폴트 값으로 [0,0] 형태로 설정
```python  
class UndergroundSystem:

    def __init__(self):
        self.check_in_data = {}
        self.journey_data = collections.defaultdict(lambda : [0, 0])
                
    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.check_in_data[id] = [stationName, t]

    def checkOut(self, id: int, end_station: str, t: int) -> None:

        start_station, start_time = self.check_in_data.pop(id)
        self.journey_data[(start_station, end_station)][0] += (t - start_time)
        self.journey_data[(start_station, end_station)][1] += 1
            
    def getAverageTime(self, start_station: str, end_station: str) -> float:
        total_time, total_trips = self.journey_data[(start_station, end_station)]
        return total_time / total_trips
```

### `leetcode 17. Letter Combinations of a Phone Number`

- solution / `recheck`
    - 재귀사용
- explanation
    1. 해당문제는 digit개수만큼 각 문자를 더해야함
    2. 재귀를 활용하는데 더할문자, 문자의 위치를 파라미터를 활용함
    3. 합쳐진 문자가 digit개수이면 결과에 합침
    4. 반복   
- PLUS
    - 중첩for문이 필요한 상황에는 재귀적으로 풀어나가보자
    - 그때 전달하는 파라미터는 문제의 조건을 통해서(해당 문제는 digit 개수만큼의 조합) 결정, 함수(중간내용물, 조건에 해당하는내용)  
```python  
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        
        def combine(s, d):
            
            if len(s) == len(digits):
                res.append(s)
                return
            
            for i in e[d[0]]:
                
                combine(s + i, d[1:])
                
        e = {
            '2': ['a', 'b', 'c'],
            '3': ['d', 'e', 'f'],
            '4': ['g', 'h', 'i'],
            '5': ['j', 'k', 'l'],
            '6': ['m', 'n', 'o'],
            '7': ['p', 'q', 'r', 's'],
            '8': ['t', 'u', 'v'],
            '9': ['w', 'x', 'y', 'z'],
        }
        
        if not digits: return []

        res = []
        
        combine("", digits)
        
        return res
```

## 7장. 배열 / 추가문제

### `11. Container With Most Water`

> 투포인터

- 내풀이
    - 해당막대기 기준으로 좌우 모두 확인하여 최대 크기 찾기
    - 결과 : 타임에러
```python  
class Solution:
    def maxArea(self, height: List[int]) -> int:
        
        result = 0
        
        for idx1, num1 in enumerate(height):
            #left
            for left, num2 in enumerate(height[:idx1]):
                if num2 >= num1:
                    result = max(result, num1 * (idx1 - left))
            for right, num3 in enumerate(height[idx1:]):
                if num3 >= num1:
                    result = max(result, num1 * (right))
                    
        return result
```
- solution / 투포인터 / `recheck`  
    - `투 포인터`를 이용해서 작은 막대기가 있는 쪽을 계속 전진시키면서 면적 비교
    - `큰 막대기는 계속해서 사용되기 때문에 큰막대기 기준으로 이동`
```python  
class Solution:
    def maxArea(self, height: List[int]) -> int:   
        max_area = 0
        left, right = 0, len(height)-1
        while left < right:
            max_area = max(max_area, min(height[left], height[right])*(right-left))
            if height[left] <= height[right]:
                left += 1
            else:
                right -= 1  
        return max_area
```

### `56. Merge Intervals`

> 정렬 후 조건문 활용

- 내풀이
    1. 정렬
    2. 첫번째 요소의 뒤가 두번째 요소 앞보다 크고 첫번째 요소의 뒤가 두번쨰 요소의 뒤보다 작으면 업데이트
    3. 첫번째 요소의 앞,뒤가 두번째 요소의 앞,뒤보다 크거나 같으면 넘어감
    4. 이외는 append  
```python  
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        
        intervals.sort(key = lambda x: (x[0], x[1]))
        
        result = [intervals[0]]
        idx = 0
        
        for ran in intervals[1:]:
            if result[idx][1] >= ran[0] and result[idx][1] < ran[1]:
                result[idx] = [result[idx][0], ran[1]]
            elif result[idx][1] >= ran[0] and result[idx][1] >= ran[1]:
                continue
            else:
                result.append(ran)
                idx += 1
                
        return result
```

- solution / 정렬 후 if조건 / `recheck`
    - 원리는 내풀이와 같음
    - 하지만 앞뒤 표현이 -1로 표기함으로써 간결하게 가져감 
    - 곱씹어볼 풀이임 -1, max를 사용한 부분  
```python  
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda x: x[0])

        merged = []
        ### 곱씹어먹어야 할 부분!!!!
        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
```

### `253. Meeting Rooms II`

> 최소힙사용

- solution 1 / `recheck`
    - 최소힙사용
    1. 정렬
    2. 첫번째꺼 끝나는 시간을 넣고 다음 시작시간과 비교
        - 시작시간이 작으면 넣고
        - 시작시간이 크면 빼고  
    ```python  
    class Solution:
        def minMeetingRooms(self, intervals: List[List[int]]) -> int:
            
            if not intervals:
                return 0
    
            free_rooms = []
    
            intervals.sort(key= lambda x: x[0])
    
            heapq.heappush(free_rooms, intervals[0][1])
    
            for i in intervals[1:]:
    
                if free_rooms[0] <= i[0]:
                    heapq.heappop(free_rooms)
    
                heapq.heappush(free_rooms, i[1])
    
            return len(free_rooms)
    ```
  
> 투포인터, 투리스트 사용

- solution 2 / `recheck`
    - 투포인터, 투리스트 사용
    1. 시작시간과 끝나는 시간 따로 정렬함
    2. 시작시간과 끝나는 시간비교
        - 시작시간이 끝나는시간보다 작으면 넣고, start += 1
        - 시작시간이 끝나는시간보다 크면 빼고, end += 1
    ```python  
    class Solution:
        def minMeetingRooms(self, intervals: List[List[int]]) -> int:
            
            if not intervals:
                return 0
    
            used_rooms = 0
    
            start_timings = sorted([i[0] for i in intervals])
            end_timings = sorted(i[1] for i in intervals)
            L = len(intervals)
    
            end_pointer = 0
            start_pointer = 0
    
            while start_pointer < L:
                if start_timings[start_pointer] >= end_timings[end_pointer]:
                    used_rooms -= 1
                    end_pointer += 1
    
                used_rooms += 1    
                start_pointer += 1   
    
            return used_rooms
    ```

### 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts

> 정렬 후 구간설정

- 내풀이 / `recheck`
    1. 정렬
    2. 구간설정
        - `여기서 엣지 케이스를 고려`
            1. 나눈 그대로의 길이
            2. 길이와 나눈 구간과 차이
        - 인접한 나눈길이의 차이  
    ```python  
    class Solution:
        def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:
            horizontalCuts.sort()
            verticalCuts.sort()
    
            h_max = max(horizontalCuts[0], h - horizontalCuts[-1])
            for a, b in zip(horizontalCuts[:-1], horizontalCuts[1:]):
                h_max = max(h_max, b - a)
            
            v_max = max(verticalCuts[0], w - verticalCuts[-1])
            for a, b in zip(verticalCuts[:-1], verticalCuts[1:]):
                v_max = max(v_max, b - a)
                    
            return (h_max * v_max) % (10**9 + 7)
    ```


### `560. Subarray Sum Equals K`

> 딕셔너리 + 연속

- solution / `recheck`
    - 딕셔너리 활용
    1. 계속 더하다가 합계 - 목표숫자가 이제까지 더했던 결과에 있으면 + 1
        - 이게 가능한 이유는 순서대로 더했기때문에 해당합이 있으면 합까지 나온데까지 제거하면 목표숫자가 나온다는 것
- PULS
    - dict.get(key, default value) : 해당키값이 없으면 디폴트값으로 반환
    
 ```python    
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        
        count, cur, res = {0: 1}, 0, 0
        for v in nums:
            cur += v
            res += count.get(cur - k, 0)
            count[cur] = count.get(cur, 0) + 1
        return res 
```