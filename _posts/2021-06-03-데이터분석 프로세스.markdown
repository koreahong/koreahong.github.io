---
layout: post
title: '데이터분석 프로세스'
subtitle: '파이썬 머신러닝 완벽 가이드 발췌'
categories: book
tags : study
comments: False
---

> 데이터수집부터 모델평가까지


[코드 정리] (https://colab.research.google.com/drive/1pAFaWcaVdJ-TRkVg5zKX1WGBOUREXkv6?usp=sharing)

- 데이터분석 프로세스
  1. 데이터수집
  2. 데이터 전처리
  3. 기초통계
  4. 차원축소
  5. 모델생성
  6. 모델평가
  7. 파라미터 최적화

-----------------------------------------

# 1. 데이터수집
  1. db 추출, SQL쿼리
  2. csv, xlsx 데이터 읽기
  3. API

-----------------------------------------

# 2. 데이터전처리
  1. Null값 처리
    - 핫덱(다르조사자료로 대체), 콜드덱(비슷한응답자료로 대체)
    - 수치 : 평균값, 최빈값, 중앙값, 삭제 등으로 대체
  2. 이상치 처리
    - boxplot으로 확인
    - summmary등으로 확인

# 3. 기초통계(데이터 전처리 과정에서도 진행함)
  1. 산점도, 히트맵 : 종속변수간 상관관계 확인
  2. 히스토그램 : 분포 확인
  3. 막대그래프 : 테이터가 자료형일 경우 확인
  4. 분산(분포), 평균(위치값) 등 대푯값 확인

# 4. 차원축소
  1. PCA : 분산을 최대로 만드는 직교직선 찾기
    - 기준1. 스크리 그래프 중 직선이 완만해지는 지점
    - 기준2. kaiser기준, 고윳값이 1 이상인 것
    - 기준3. 분산 설명력 70-90%
  
# 5. 모델생성
  1. 모델분류
    - 지도학습 : 라벨링 값이 있음, 분류, 회귀
    - 비지도학습 : 클러스터링
    - 강화학습 : 더 많은 보상을 받을 수 있는 정책을 만드는 것
    
    - 앙상블 : 여러 분류기를 사용하여 결과를 산출
      1. 보팅
        - 소프트 보팅 : 확률의 평균을 결과로 산출
        - 하드 보팅 : 다수결 원칙과 같이 과반의 결과를 최종 결과로 산출
      2. 배깅
        - 무작위 복원추출로 여러 학습기를 만들어서 보팅으로 결과 산출
        - 랜덤포레스트가 대표적, 단 랜덤포레스트는 변수선택도 무작위로 추출함
      3. 부스팅
        - 예측 오류에 가중치를 부여하여 오류를 개선하여 결과 산출
        - xgboost, liggbm등이 있음
      
  2. 데이터분할
    - 통상, 7:3 / 6:2:2 비율로 나눔
    - train data : 말 그대로 학습을 위한 데이터 set
    - valid data : 학습모델을 평가하기 위한 데이터 set, 여러번 사용됨
    - test data : 최종적으로 모델의 성능을 평가하기 위한 데이터 set, 한번 사용됨

# 6. 모델평가
    - 분류
      1. confusion matrix
        - 정확도, 오류율 : 일반적인 성능지표
        - 정밀도 : 긍정 예측 중 실제 긍정 비율, TP / (FN + TP), FN을 낮추는데 초점
        - 재현율(민감도, TPR) : 실제 긍정 중 긍정 예측 비율, TP / (FP + TP), FP을 낮추는데 초점
        - F1 스코어 : 정밀도와 재현율을 동시에 고려한 지표, 2 * 정밀도 * 재현율 / (정밀도 + 재현율)
      2. ROC 그래프
        - x축-FPR(1 - 실제 부정 중에 부정으로 예측한 비율), y축-TPR(민감도)
        - AUC : ROC곡선 밑의 넓이. 0.5 - 1(1에 가까워질수록 성능이 좋은 모델)
      3. 교차검증
        - k-fold : n겹 교차검증, 학습데이터를 학습, 평가데이터를 n겹으로 나누고 최종결과를 평균내어 성능을 평가

# 7. 파라미터 최적화
  - 그리드서치 알고리즘 : 교차검증 , 범위를 주어주면 범위 안에서 가장 좋은 성능의 파라미터를 찾음




	