---
layout: post
title: '(SQL)해커랭크 문제풀이 51~56'
subtitle: '해커랭크'
categories: sql
tags: practice
comments: True
---

> Symmetric Pairs 부터 ~ Placements까지 


-------------------------------------------------------------------------------

# Symmetric Pairs

```sql
SELECT if(X <= Y, X, Y) , if (x <= y, Y, X)
  FROM Functions
 GROUP BY 1,2
HAVING count(*) > 1
ORDER BY 1
```
- 아주 브릴리언트한  방법이다. 
    1. x와 y를 비교해서 x자리에 min(x,y)를 오게한다는 말이다.
    2. 그리고 나서 x,y 그룹바이
    3. having절로 그룹바이 2개 이상인것만 추출
- 여기서 의문, group by가 먼저 실행되는데 select절에서 변환된 데이터를 어떻게 쓰는거지?
    - [mysql document]("https://dev.mysql.com/doc/refman/5.6/en/problems-with-alias.html)
    - 도큐먼트를 참고하면, where절이 있을경우 select절 먼저 걸러지기전에 where절이 실행됨으로 위와같은 sql문은 부적절함.
    - 하지만, where절이 없을경우 문제될건 없음
    
```sql
SELECT A.x, A.y
FROM FUNCTIONS A JOIN FUNCTIONS B ON
    A.x = B.y AND A.y = B.x
GROUP BY A.x, A.y
HAVING COUNT(A.x) > 1 OR A.x < A.y
ORDER BY A.x
```
- 출제의도에 맞게 푼 방법이다.
    1. 조인을 하는데 self join으로, x=y, y=x라는 조건을 건다
    2. 위 조건을 통해 산출되는 결과는 symatric인 x,y가 나온다.
    3. x=y가 같은경우에도 symatric이 아닌 로우도 산출되어서 having 절에서 A.x < A.y의 조건을 걸어 걸러준다
    4. x=y이고 symatric한 경우에 group by으로 묶으면 여러번 나오기 때문에 having 절에서 count(*)>1을 걸어 산출한다.
    
# interviews

```sql
select con.contest_id, con.hacker_id,  con.name,  sum(ts.total_submissions), sum(ts.total_accepted_submissions),  sum(tv.total_views), sum(tv.total_unique_views)
from
    contests con 
    join colleges co on con.contest_id = co.contest_id
    join challenges ch on co.college_id = ch.college_id
    left outer join 
    (select challenge_id, sum(total_views) as total_views, sum(total_unique_views) as total_unique_views
        from view_stats
        group by challenge_id) tv on ch.challenge_id = tv.challenge_id
        
    left outer join 

        (select challenge_id, sum(total_submissions) as total_submissions, sum(total_accepted_submissions) as total_accepted_submissions
        from Submission_Stats
        group by challenge_id) ts on ts.challenge_id = ch.challenge_id
        
group by con.contest_id, con.hacker_id, con.name 
having sum(tv.total_views)+sum(total_unique_views) +sum(ts.total_submissions)+sum(ts.total_accepted_submissions)> 0
order by con.contest_id
```

- 조인 후 집계해야하는 문제이다. 큰 어려움은 없으나 중간 left outer join을 하여,
  sum()부분이 null인 challenge_id를 고려한다 

`# 15 Days of Learning SQL`

```sql
SELECT s.submission_date, s_count.hacker_count, s_best.best_hacker, h.name
FROM submissions as s
JOIN ( -- 현재까지 매일 submission 하는 hackers
    SELECT submission_date, count(distinct hacker_id) as hacker_count
    FROM submissions as s1
    WHERE submission_date - DATE('2016-03-01') = (
        SELECT count(distinct submission_date)
        FROM submissions as s2
        WHERE s2.submission_date < s1.submission_date
        and s2.hacker_id = s1.hacker_id
        )
    GROUP BY submission_date
    ) as s_count on s.submission_date = s_count.submission_date
JOIN ( -- 각 날짜별 가장 많이 submission한 hacker 
    SELECT submission_date, hacker_id as best_hacker
    FROM submissions as s3
    WHERE hacker_id = (
        SELECT hacker_id
        FROM submissions as s4
        WHERE s4.submission_date = s3.submission_date
        GROUP BY hacker_id
        ORDER BY count(submission_id) desc, hacker_id limit 1
        )
    GROUP BY submission_date, hacker_id
    ) as s_best on s.submission_date = s_best.submission_date
JOIN hackers as h on s_best.best_hacker = h.hacker_id
GROUP BY s.submission_date, s_count.hacker_count, s_best.best_hacker, h.name
ORDER BY s.submission_date;
```
- 이거는.... 모르겠다 다시 공부필요!!!

# Draw The Triangle 1

```sql
set @cnt = 21;

select repeat('* ', @cnt:=@cnt-1) 
from information_schema.tables limit 20
```
- information_schema은 built-in table이다. 
- *로 셀렉하면 table이름이랑 정보가 나오는데 repeat~ 로 대체하면서 테이블 대신 별이 찍히는 것이다.
- 따라서 select해서 20개가 넘는 정보가 들어있는 table을 호출한 것뿐 아무런 역할을 하지 않는다

# Draw The Triangle 2

```sql
set @cnt = 0;

select repeat('* ', @cnt:=@cnt+1) 
from information_schema.tables limit 20
```

# Print Prime Numbers

```sql
SELECT GROUP_CONCAT(NUMB SEPARATOR '&')
FROM (SELECT @num:=@num+1 AS NUMB
      FROM information_schema.tables t1,
           information_schema.tables t2,
           (SELECT @num:=1) tmp
      ) tempNum
WHERE NUMB <= 1000
AND NOT EXISTS (SELECT *
                FROM (SELECT @nu:=@nu+1 AS NUMA
                      FROM information_schema.tables t1,
                           information_schema.tables t2,
                           (SELECT @nu:=1) tmp1
                      LIMIT 1000
                      ) tempNum1
                WHERE FLOOR(NUMB/NUMA) = (NUMB/NUMA)
                AND NUMA < NUMB
               )
```

- 여기서 의문, where floor ~ 부분, 이게 자동  카티션곱이되고 나눗셈이 진행되는 것인가

# Challenges

```sql
select h.hacker_id, h.name, count(h.name) as challenges_created
from hackers h inner join challenges c on h.hacker_id = c.hacker_id
group by h.hacker_id, h.name
having challenges_created = (select count(*)
                             from challenges
                             group by hacker_id 
                             order by count(*) desc limit 1)
                             or 
      challenges_created in (select cnt
                              from (select count(*) as cnt
                                   from challenges
                                   group by hacker_id
                                   ) as cc
                             group by cc.cnt
                             having count(cnt) = 1)
order by challenges_created desc, h.hacker_id
```
- 상위하나만 뽑는 구간 challenges_created = ~
- total number가 중복되지 않는 구간 challenges_created in ~, 특히 해당 개수의 개수를 세어 개수가 중복되는지 확인하는 방법이다.

# Contest Leaderboard

```sql
select h.hacker_id, h.name, sum(max_tbl._max_score) as _sum_score
-- choose max score each challenge_id
from
    (select hacker_id, challenge_id, max(score) as _max_score
    from submissions
    group by hacker_id, challenge_id) as max_tbl
    inner join hackers h on max_tbl.hacker_id = h.hacker_id
group by h.hacker_id, h.name
having sum(max_tbl._max_score) != 0
order by _sum_score desc, h.hacker_id
```

# SQL Project Planning

```sql
set @sdate = null;
set @nextdate = null;

select Sd,max(Ed) Ed2 
from 
    (select if(@nextdate = Start_Date,@sdate,@sdate:=Start_Date) Sd,@nextdate:=End_Date Ed 
     from Projects 
     order by Start_Date) A
group by Sd
order by datediff(max(Ed),Sd)
```
- 아주 그냥 브릴리언트한 방법이다... if(조건,참일때, 거짓일때).  
    1.변수를 선언해서 시작날짜(sdate)와 마지막날짜(nextdate)를 저장한다  
    2.마지막날짜가 시작날짜와 같으면 sdate는 그대로 nextdate는 해당 row의 enddate를 저장  
    3.반복 후, 시작날짜를 그룹으로 묵어 마지막날짜가 큰거를 출력..... 키야ㅑㅑㅑ

```sql
SET @browno = 0;
SET @erowno = 0;

select beginnings.start_date, ends.end_Date from 
(Select a.start_Date, @browno:=@browno+1 as p from Projects a
LEFT JOIN Projects b on a.start_date=b.end_date where b.start_date is null order by start_date) as beginnings
JOIN
(Select x.end_date, @erowno:=@erowno+1 as p from Projects x
LEFT JOIN Projects y on x.end_date=y.start_date where y.end_date is null order by end_date) as ends
on beginnings.p=ends.p 

order by datediff(ends.end_Date,beginnings.start_date), beginnings.start_Date;
```
- 위 방법이 더 빨리 진행된다
- 위 방법의 아이디어는 아래와 같다
    1. 시작날짜end컬럼과 동일한 start날짜를 붙인다, 그러면 end날짜가 붙지 않는 start발견, 변수로 카운트저장
    2. 마지막날짜도 위와 동일하게 진행
    3. 시작카운트와 마지막 카운트를 조인
    4. 시작날짜, 마지막날짜만 출력
    
# Placements

```sql
select me.name
from 
    (select s.id, s.name, p.salary
    from students s inner join packages p on s.id = p.id) as me
    inner join 
    (select f.id, f.friend_id, p.salary
    from friends f inner join packages p on f.friend_id = p.id) as friend on me.id = friend.id
where me.salary < friend.salary
order by friend.salary 
```
- 깔끔해보이는거 같지만 select문에 이름을 일일히 작성을 해야하는 번거러움이 있음... 
- 고려해봐야함

```sql
SELECT s.Name FROM
Students s
JOIN Friends f
ON s.ID = f.ID
JOIN Packages p
ON s.ID = p.ID
JOIN Packages p_friend
ON f.Friend_ID = p_friend.ID
WHERE p.Salary < p_friend.Salary
ORDER By  p_friend.Salary
```
- 순차적으로 조인을 시도하여 최종적으로 비교를 하면 됨
- 첫번째 방법보다는 편하지만 좋은 방법인지는 의문..